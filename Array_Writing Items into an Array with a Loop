We commonly use a loop to put lots of values into an Array. To illustrate this, let's go to another example. 
This time, we're going to create an Array of ints and put the first 10 square numbers into it.

PROGRAM TO FIND THE SQUARE OF NUMBERS:::

int[] squareNumbers = new int[10];

    // Go through each of the Array indexes, from 0 to 9.
    for (int i = 0; i < 10; i++) {
        // We need to be careful with the 0-indexing. The next square number
        // is given by (i + 1) * (i + 1).
        // Calculate it and insert it into the Array at index i.
        int square = (i + 1) * (i + 1);
        squareNumbers[i] = square;
    }
    
READING ITEMS FROM AN ARRAY WITH A LOOP ::
We can also use a loop to print out everything that's in the Array.

    // Go through each of the Array indexes, from 0 to 9.
    for (int i = 0; i < 10; i++) {
        // Access and print what's at the i'th index.
        System.out.println(squareNumbers[i]);
    }

    // Will print:
    // 1
    // 4
    // 9
    // 16
    // 25
    // 36
    // 49
    // 64
    // 81
    // 100
    
 ONE LAST THING WORTH KNOWING NOW IS THAT THERE'S A MORE ELEGANT WAY OF PRINTING OUT THE VALUES OF AN ARRAYâ€”A VARIANT OF THE FOR LOOP, 
 COMMONLY REFERRED TO AS A "FOR EACH" LOOP.
 
     // For each VALUE in the Array.
    for (int square : squareNumbers) {
        // Print the current value of square.
        System.out.println(square);
    }
    // Prints exactly the same as the previous example.
    
  
You'll probably agree that this code is a lot simpler to read. We can use it whenever we don't need the index values. 
For actually writing the squares into the Array, it wouldn't have worked because we needed to work with the actual index numbers. 

 




